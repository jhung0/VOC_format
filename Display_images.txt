import numpy as np
from PIL import Image
from IPython.display import display
import pickle
import os

#obtain list of test images in order
test_files = []
with open('/home/ubuntu/try1/data/ImageSets/test.txt') as f:
    for file_ in f.readlines():
        test_files.append(file_.strip())
#print test_files

image_path = '/home/ubuntu/try1/data/Images/'
classes = ['__background__', 'rbc', 'ring', 'gam', 'uncertain']
THRESHOLD = 0.5
path = '/home/ubuntu/try1/results/test/'

#for each test image, for each class get the bounding box coordinates of the objects with probability >= THRESHOLD
#for each filtered detection, draw a colored box 
for file_index, file_ in enumerate(test_files):
    print file_
    #get numpy array of image 
    try:
        extension='.tif'
        pil_im = np.asarray(Image.open(os.path.join(image_path, file_+extension)))
    except: 
        extension='.jpg' 
        pil_im = np.asarray(Image.open(os.path.join(image_path, file_+extension)))

             
    pil_im = pil_im.copy()
    
    for cls in range(1,len(classes)):
        filtered_boxes=[]
        
        #open nms detection file
        filename = '15913_det_test_'+classes[cls]+'.txt'
        with open(os.path.join(path, filename), 'r') as f:
            for line in f.readlines():
                line_list = line.split()
                #if file name matches
                if line_list[0].lower() == file_.lower():
                    #if the detection has probability above the threshold
                    if float(line_list[1]) >= THRESHOLD:
                        print line_list
                        filtered_boxes.append([float(i) for i in line_list[2:]])
        
        for box in filtered_boxes:
            box = [int(box[ii]) for ii in range(len(box))]
            if cls ==1:
                for i in range(box[0], box[2]):
                    pil_im[box[1],i, :] = 0
                    pil_im[box[3],i, :] = 0
                for j in range(box[1], box[3]):
                    pil_im[j,box[0], :] = 0
                    pil_im[j,box[2], :] = 0
            elif cls ==2:
                for i in range(box[0], box[2]):
                    pil_im[box[1],i, 0] = 255
                    pil_im[box[3],i, 0] = 255
                for j in range(box[1], box[3]):
                    pil_im[j,box[0], 0] = 255
                    pil_im[j,box[2], 0] = 255
            elif cls ==3:
                for i in range(box[0], box[2]):
                    pil_im[box[1],i, 1] = 255
                    pil_im[box[3],i, 1] = 255
                for j in range(box[1], box[3]):
                    pil_im[j,box[0], 1] = 255
                    pil_im[j,box[2], 1] = 255
            elif cls ==4:
                for i in range(box[0], box[2]):
                    pil_im[box[1],i, 2] = 255
                    pil_im[box[3], i,2] = 255
                for j in range(box[1], box[3]):
                    pil_im[j,box[0], 2] = 255
                    pil_im[j,box[2],  2] = 255
    display(Image.fromarray(pil_im,'RGB'))
